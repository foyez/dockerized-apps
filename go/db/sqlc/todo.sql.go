// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  text
) VALUES (
  $1
) RETURNING id, text, is_done, created_at
`

func (q *Queries) CreateTodo(ctx context.Context, text string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, text)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.IsDone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, text, is_done, created_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.IsDone,
		&i.CreatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, text, is_done, created_at FROM todos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTodosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.IsDone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET is_done = $1
WHERE id = $2
RETURNING id, text, is_done, created_at
`

type UpdateTodoParams struct {
	IsDone bool  `json:"is_done"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.IsDone, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.IsDone,
		&i.CreatedAt,
	)
	return i, err
}
